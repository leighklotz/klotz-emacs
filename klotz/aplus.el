(defun apl-insert ()
  "insert apl character"
  (interactive)
  (let ((name (completing-read "Name: " apl-symbols)))
    (if (not (equal name ""))
	(let ((val (cadr (assoc name apl-symbols))))
	  (if val (insert val))))))

(defun apl-help ()
  "describe apl character"
  (interactive)
  (let* ((name (completing-read "Name: " apl-symbols)) 
	 (str (buffer-substring (point) (1+ (point))))
	 (def  (if (not (equal name ""))
		   (assoc name apl-symbols)
		   (do ((a apl-symbols (cdr a)))
		       ((null a) nil)
		     (if (equal str (cadr (car a))) (return (car a)))))))
    (message (concat 
	      (if (equal name "") (concat str " ") "")
	      (or (and (nth 0 def) (concat "(" (nth 0 def) ") ")) "")
	      (or (and (nth 2 def) (concat "Monadic: " (nth 2 def) " ")) "")
	      (or (and (nth 3 def) (concat "Dyadic: "  (nth 3 def) " ")) "")
	      (or (nth 4 def) "")))))

(defvar apl-symbols
'(
; C	NAME		MONADIC FUNCTION	DYADIC FUNCTION		NOTES
("high-bar"	"¢"	nil			nil			"Negative Number")
("bang"		"!"	"Item Ravel"   		"Restructure"		nil)
("number-sign"	"#"	nil			"Choose")
("dollar"	"$"	nil			nil "For system commands - abandon current function execution")
("percent"	"%"	"Value"			"Value in Context")
("ampersand"	"&"	"Stack References"	nil)
("asterisk"	"*"	"Exponential"		"Power")
("plus"		"+"	"Identity"		"Add")
("comma"	","	"Ravel"			"Catenate")
("mid-bar"	"-"	"Negate"		"Minus")
("dot"		"."	nil			"Inner Product"		"The derived function is Dyadic")
("slash"	"/"	nil			"Compress"		"MONADIC OPERATOR, DERIVING A DYADIC FUNCTION Reduce")
("colon"	":"	nil			nil			"used to create Defined Functions - used to create Dependencies")
("less-than"	"<"	"Box / Enclose"		"Less than")
("less-equal"   "¤"     "Grade Up"                 "Less than or equal to")
("equals"	"="	nil			"Equals")
("greater-than"	">"	"Unbox / Disclose"	"Greater than")
("query"	"?"	"Roll"			"Deal")
("at"		"@"	"Rank"			nil			"The derived function may be Monadic or Dyadic")
("backslash"	"\\"	"Expand"          	nil			"MONADIC OPERATOR, DERIVING A DYADIC FUNCTION Scan")
("caret"	"^"	"Stop"			"And")
("back-quote"	"`"	nil			nil			"Used to create symbols")
("verticalbar"	"|"	"Absolute Value"	"Residue")
("tilde"	"~"	"Not"			nil)
("greater-equal""¦"	"Stop"			"Greater than or equal to")
("not-equal"	"¨"	nil			"Not equal to")
("down-caret"	"©"	"Type"			"Cast (symbol as left argument) Or   (boolean)")
("cross"	"«"	"Sign"			"Times")
("domino"	"­"	"Matrix Inverse"	"Solve")
("dotted-del"	"®"	"Bitwise"   		nil			"The derived function may be Monadic or Dyadic")
("tri-bar"	"½"	"Depth"			"Match")
("up-tack"	"Â"	"Pack"			"Decode Base")
("downstile"	"Ä"	"Floor"			"Min")
("epsilon"	"Å"	"Rake"			"Member")
("iota"		"É"	"Interval"		"Find Index of")
("jot"		"Ê"	nil			nil			"PLACEHOLDER FOR DYADIC OPERATOR Used with Dot for Outer Product The derived function is Dyadic")
("down-tack"	"Î"	"Unpack"		"Encode Representation")
("circle"	"Ï"	"Pi times"		"Circle")
("rho"		"Ò"	"Shape"			"Reshape")
("upstile"	"Ó"	"Ceiling"		"Max")
("down-arrow"	"Õ"	"Print"			"Drop")
("down-shoe"	"Ã"	"Separate Symbols"	"Combine Symbols")
("right-shoe"	"Ø"	"Raze"			"Pick")
("up-arrow"	"Ù"	"Signal"		"Take")
("left-shoe"	"Ú"	"Partition Count"	"Partition")
("right-tack"	"Û"	"Right"			nil)
("left-tack"	"Ý"	"null"			"Left")
("divide"	"ß"	"Reciprocal"		"Divide")
("i-beam"	"à"	"Map In"		"Map")
("hydrant"	"â" 	"Execute"		"Protected Execute")
("lamp"		"ã"	nil			nil			"Used for comments")
("del-stile"	"ç"	"Grade Down"		nil)
("delta-stile"	"è"	"Grade Up"		"Bins")
("thorn"	"î" 	"Default Format"	"Format")
("circle-star"	"ð"	"Natural Log"		"Log")
("circle-backslash"	"ô" "Transpose"		"Transpose Axes")
("circle-stile"	"÷"	"Reverse"		"Rotate")
("left-arrow"	"û"	"execution"          	"Assignment")
("right-arrow"	"ý"	nil			nil			"current function execution - clear most-recent suspension")
("underscore"	"_"	nil			nil			" used as a separator in names")
("semicolon"	";"     nil			nil			"Statement Separator:  - used to separate multiple statements on one line - used to end statements in defined functions - used to separate elements for nested arrays - used to separate dimensions within bracket indexing")

))



(defun apl-mode ()
  (interactive)
  (local-set-key "\ei" 'apl-insert)
  (local-set-key "\eh" 'apl-help)
  (set-face-font 'default "kaplcour"))
